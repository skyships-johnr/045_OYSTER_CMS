//License information for RapidXml library.
//
//Copyright(c) 2006, 2007 Marcin Kalicinski
//
//Permission is hereby granted, free of charge, to any person or organization
//obtaining a copy of the software and accompanying documentation covered by
//this license(the "Software") to use, reproduce, display, distribute,
//execute, and transmit the Software, and to prepare derivative works of the
//Software, and to permit third - parties to whom the Software is furnished to
//do so, all subject to the following :
//
//The copyright notices in the Software and this entire statement, including
//the above license grant, this restriction and the following disclaimer,
//must be included in all copies of the Software, in whole or in part, and
//all derivative works of the Software, unless such copies or derivative
//works are solely in the form of machine - executable object code generated by
//a source language processor.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON - INFRINGEMENT.IN NO EVENT
//SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//DEALINGS IN THE SOFTWARE.

#include "xml_data.h"
#define XML_FILE "cms_config.xml"
//#define XML_FILE "xmltemplate.xml"

XmlData *XmlData::instance = 0;
//========================================================================================
//		Constructor and destructor
//========================================================================================

XmlData::XmlData()
{
	filebuffer = NULL;
	fsize_ = 0;
	cms_self_node_ = 0;
}

XmlData::~XmlData()
{
	if (instance != 0)
		delete instance;
}

XmlData * XmlData::Instance()
{
	if (instance == 0)
        instance = new XmlData;

    return instance;
}

int XmlData::LoadXmlFile()
{
	//	Read contents of file into a charr array terminated in \0
	FILE *xml_file = fopen(XML_FILE, "rb");
	fseek(xml_file, 0, SEEK_END);
	fsize_ = ftell(xml_file);
	fseek(xml_file, 0, SEEK_SET);
	filebuffer = new char[fsize_ + 1];
	fread(filebuffer, fsize_, 1, xml_file);
	fclose(xml_file);
	filebuffer[fsize_] = 0;

	xml_doc.parse<0>(filebuffer);

	xmlfile_mutex_ = PTHREAD_MUTEX_INITIALIZER;

	return 0;
}

int XmlData::GetCmsInfo()
{
	rapidxml::xml_node<> *node;
	rapidxml::xml_node<> *device_node;
	rapidxml::xml_attribute<> *attribute;
	string device_id;
	string master_id;
	kzString temp_value;

	//	Struct for value
	CmsData::CmsConfig cms_slave;

	//	Clear values
	CmsData::Instance()->menu_pages_.clear();
	CmsData::Instance()->cms_self_.is_master = false;
	CmsData::Instance()->cms_slaves_.clear();

	node = xml_doc.first_node("cms");

	if (node == NULL)
	{
		//	Wrong kind of file
		return -1;
	}

	//	If it gets here, it will assume that the xml config file was well written
	node = node->first_node("config");

	//	Get all necessary IDs
	attribute = node->first_attribute("deviceID");
	device_id = attribute->value();
	temp_value = attribute->value();
	CmsData::Instance()->self_id_ = kzcStringToInt(temp_value);
	attribute = attribute->next_attribute("masterID");
	master_id = attribute->value();
	temp_value = attribute->value();
	CmsData::Instance()->master_id_ = kzcStringToInt(temp_value);
	attribute = attribute->next_attribute("mmsID");
	temp_value = attribute->value();
	CmsData::Instance()->mms_id_ = kzcStringToInt(temp_value);
	attribute = attribute->next_attribute("canID");
	temp_value = attribute->value();
	CmsData::Instance()->can_id_ = kzcStringToInt(temp_value);
	attribute = attribute->next_attribute("mmsipaddr");
	CmsData::Instance()->mms_ipaddr_ = attribute->value();
	attribute = attribute->next_attribute("port");
	temp_value = attribute->value();
	CmsData::Instance()->mms_port_ = kzcStringToInt(temp_value);
	CmsData::Instance()->self_port_ = CmsData::Instance()->mms_port_;

	node = node->next_sibling("devices");

	unsigned int device_count = rapidxml::count_children(node);

	//	If is master, grow the slaves vector
	if (device_id == master_id)
	{
		CmsData::Instance()->cms_self_.is_master = true;

		device_node = node->first_node("device");
		CmsData::Instance()->cms_slaves_.clear();
		cms_slave_nodes_.clear();
		for (unsigned int device_it = 0; device_it < device_count; device_it++)
		{
			attribute = device_node->first_attribute("id");
			temp_value = attribute->value();

			//	Jumps to next if is master
			if (temp_value != master_id)
			{
				cms_slave.id = kzcStringToInt(temp_value);

				attribute = attribute->next_attribute("name");
				cms_slave.hostname = attribute->value();

				attribute = attribute->next_attribute("label");
				cms_slave.label = attribute->value();

				attribute = attribute->next_attribute("hashname");
				cms_slave.mmshash_name = attribute->value();

				CmsData::Instance()->cms_slaves_.push_back(cms_slave);
				cms_slave_nodes_.push_back(device_node);
			}

			device_node = device_node->next_sibling();
		}

	}

	//	Iterates through device nodes to point to the right self device
	if (device_count > 0)
	{
		node = node->first_node("device");

		for (unsigned int device_it = 0; device_it < device_count; device_it++)
		{
			if (node->first_attribute()->value() == device_id)
				break;
			node = node->next_sibling();
		}
	}

	cms_self_node_ = node;

	attribute = node->first_attribute("id");
	temp_value = attribute->value();
	CmsData::Instance()->cms_self_.id = kzcStringToInt(temp_value);

	attribute = attribute->next_attribute("name");
	CmsData::Instance()->cms_self_.hostname = attribute->value();

	attribute = attribute->next_attribute("label");
	CmsData::Instance()->cms_self_.label = attribute->value();

	attribute = attribute->next_attribute("hashname");
	CmsData::Instance()->cms_self_.mmshash_name = attribute->value();

	attribute = attribute->next_attribute("ipaddr");
	CmsData::Instance()->self_ipaddr_ = attribute->value();


	//	Get Lights node
	node = node->first_node("lights");
	//	Check if it has lights
	if (rapidxml::count_children(node) != 0)
	{
		//	Push light page into vector
		CmsData::Instance()->menu_pages_.push_back(LIGHTING_PAGE);
	}

	//	Get Blinds node
	node = node->next_sibling("blinds");
	//	Check if it has blinds
	if (rapidxml::count_children(node) != 0)
	{
		//	Push Blinds page into vector
		CmsData::Instance()->menu_pages_.push_back(BLINDS_PAGE);
	}

	//	Get Climate node
	node = node->next_sibling("climate");
	//	Check if it has climate
	if (rapidxml::count_children(node) != 0)
	{
		//	Push Climate page into vector
		CmsData::Instance()->menu_pages_.push_back(CLIMATE_PAGE);
	}

	//	Get Ventilation node
	node = node->next_sibling("ventilation");
	//	Check if it has ventilation
	if (rapidxml::count_children(node) != 0)
	{
		//	Push Blinds page into vector
		CmsData::Instance()->menu_pages_.push_back(FANS_PAGE);
	}

	//	Get Settings node
	node = node->next_sibling("settings");
	//	Check if it has settings
	if (rapidxml::count_children(node) != 0)
	{
		//	Push Blinds page into vector
		CmsData::Instance()->menu_pages_.push_back(SETTINGS_PAGE);
	}


	return 0;
}

void XmlData::GetLightsInfo()
{
	rapidxml::xml_node<> *node = NULL;
	int group_count;
	int lights_count;

	Lighting::LightData light_data;
	Lighting::LightGroup light_group;

	node = cms_self_node_->first_node("lights");
	if(strcmp(node->last_node()->name(), "master") == 0)
	{
		CmsData::Instance()->cms_self_.lighting_.master_switch_.id = atoi(node->last_node()->first_attribute("id")->value());
		CmsData::Instance()->cms_self_.lighting_.master_switch_.name = node->last_node()->first_attribute("name")->value();
		CmsData::Instance()->cms_self_.lighting_.master_switch_.value = true;
		CmsData::Instance()->cms_self_.lighting_.master_switch_.has_master = true;
		CmsData::Instance()->cms_self_.lighting_.master_switch_.message_instance = atoi(node->last_node()->first_node("pgn")->first_attribute("instance")->value());
		CmsData::Instance()->cms_self_.lighting_.master_switch_.frame_position = atoi(node->last_node()->first_node("pgn")->first_attribute("bitposition")->value());
		group_count = rapidxml::count_children(node) - 1;
	}
	else
	{
		CmsData::Instance()->cms_self_.lighting_.master_switch_.has_master = false;
		group_count = rapidxml::count_children(node);
	}


	if(group_count > 0)
	{
		//	Get nightbit information
		CmsData::Instance()->cms_self_.lighting_.nightbit_message_instance_ = (unsigned char)atoi(node->first_attribute("nightbitinstance")->value());
		CmsData::Instance()->cms_self_.lighting_.nightbit_frame_position_ = (unsigned char)atoi(node->first_attribute("nightbitposition")->value());

		node = node->first_node("group");
		CmsData::Instance()->cms_self_.lighting_.lightgroups_.clear();
		for(int group_it = 0; group_it < group_count; group_it++)
		{
			//	Get group info
			light_group.id = atoi(node->first_attribute("id")->value());
			light_group.name = node->first_attribute("name")->value();
			if(strcmp(node->first_attribute("theatre")->value(), "yes") == 0)
				light_group.has_theatre = true;
			else
				light_group.has_theatre = false;
			if(strcmp(node->first_attribute("shower")->value(), "yes") == 0)
				light_group.has_shower = true;
			else
				light_group.has_shower = false;

			light_group.related_fangroup = atoi(node->first_attribute("relatedfangroup")->value());

			light_group.profile = Lighting::NIGHT; // ##INITIAL DAY NIGHT MODE
			light_group.lights.clear();
			lights_count = rapidxml::count_children(node);
			if(lights_count > 0)
			{
				node = node->first_node("light");

				for(int light_it = 0; light_it < lights_count; light_it++)
				{
					light_data.id = atoi(node->first_attribute("id")->value());
					light_data.group = light_group.id;
					light_data.name = node->first_attribute("name")->value();
					light_data.message_instance = atoi(node->first_node("pgn")->first_attribute("instance")->value());
					light_data.frame_position = atoi(node->first_node("pgn")->first_attribute("byteposition")->value());
					light_data.day_value = atoi(node->first_node("levels")->first_attribute("day")->value());
					light_data.eve_value = atoi(node->first_node("levels")->first_attribute("eve")->value());
					light_data.night_value = atoi(node->first_node("levels")->first_attribute("night")->value());
					light_data.theatre_value = atoi(node->first_node("levels")->first_attribute("theatre")->value());
					light_data.shower_value = atoi(node->first_node("levels")->first_attribute("shower")->value());
					light_data.day_defaultvalue = atoi(node->first_node("defaultlevels")->first_attribute("day")->value());
					light_data.eve_defaultvalue = atoi(node->first_node("defaultlevels")->first_attribute("eve")->value());
					light_data.night_defaultvalue = atoi(node->first_node("defaultlevels")->first_attribute("night")->value());
					light_data.theatre_defaultvalue = atoi(node->first_node("defaultlevels")->first_attribute("theatre")->value());
					light_data.shower_defaultvalue = atoi(node->first_node("defaultlevels")->first_attribute("shower")->value());

					light_group.lights.push_back(light_data);

					if(node->next_sibling() != 0)
						node = node->next_sibling();
				}

				node = node->parent();
			}

			CmsData::Instance()->cms_self_.lighting_.lightgroups_.push_back(light_group);
			if(node->next_sibling() != 0)
				node = node->next_sibling();
		}
	}

	//	If I'm master, do the slaves
	if(CmsData::Instance()->cms_self_.is_master)
	{
		for(unsigned int cms_it = 0; cms_it < cms_slave_nodes_.size(); cms_it++)
		{
			node = cms_slave_nodes_.at(cms_it)->first_node("lights");
			if(strcmp(node->last_node()->name(), "master") == 0)
			{
				CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.master_switch_.id = atoi(node->last_node()->first_attribute("id")->value());
				CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.master_switch_.name = node->last_node()->first_attribute("name")->value();
				CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.master_switch_.value = true;
				CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.master_switch_.has_master = true;
				CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.master_switch_.message_instance = atoi(node->last_node()->first_node("pgn")->first_attribute("instance")->value());
				CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.master_switch_.frame_position = atoi(node->last_node()->first_node("pgn")->first_attribute("bitposition")->value());
				group_count = rapidxml::count_children(node) - 1;
			}
			else
			{
				CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.master_switch_.has_master = false;
				group_count = rapidxml::count_children(node);
			}

			if(group_count > 0)
			{
				CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.nightbit_message_instance_ = (unsigned char)atoi(node->first_attribute("nightbitinstance")->value());
				CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.nightbit_frame_position_ = (unsigned char)atoi(node->first_attribute("nightbitposition")->value());

				node = node->first_node("group");
				CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.lightgroups_.clear();
				for(int group_it = 0; group_it < group_count; group_it++)
				{
					//	Get group info
					light_group.id = atoi(node->first_attribute("id")->value());
					light_group.name = node->first_attribute("name")->value();
					if(strcmp(node->first_attribute("theatre")->value(), "yes") == 0)
						light_group.has_theatre = true;
					else
						light_group.has_theatre = false;
					if(strcmp(node->first_attribute("shower")->value(), "yes") == 0)
						light_group.has_shower = true;
					else
						light_group.has_shower = false;

					light_group.related_fangroup = atoi(node->first_attribute("relatedfangroup")->value());

					light_group.profile = Lighting::NIGHT; // ##INITIAL DAY NIGHT MODE
					light_group.lights.clear();
					lights_count = rapidxml::count_children(node);
					if(lights_count > 0)
					{
						node = node->first_node("light");

						for(int light_it = 0; light_it < lights_count; light_it++)
						{
							light_data.id = atoi(node->first_attribute("id")->value());
							light_data.group = light_group.id;
							light_data.name = node->first_attribute("name")->value();
							light_data.message_instance = atoi(node->first_node("pgn")->first_attribute("instance")->value());
							light_data.frame_position = atoi(node->first_node("pgn")->first_attribute("byteposition")->value());
							light_data.day_value = atoi(node->first_node("levels")->first_attribute("day")->value());
							light_data.eve_value = atoi(node->first_node("levels")->first_attribute("eve")->value());
							light_data.night_value = atoi(node->first_node("levels")->first_attribute("night")->value());
							light_data.theatre_value = atoi(node->first_node("levels")->first_attribute("theatre")->value());
							light_data.shower_value = atoi(node->first_node("levels")->first_attribute("shower")->value());
							light_data.day_defaultvalue = atoi(node->first_node("defaultlevels")->first_attribute("day")->value());
							light_data.eve_defaultvalue = atoi(node->first_node("defaultlevels")->first_attribute("eve")->value());
							light_data.night_defaultvalue = atoi(node->first_node("defaultlevels")->first_attribute("night")->value());
							light_data.theatre_defaultvalue = atoi(node->first_node("defaultlevels")->first_attribute("theatre")->value());
							light_data.shower_defaultvalue = atoi(node->first_node("defaultlevels")->first_attribute("shower")->value());

							light_group.lights.push_back(light_data);

							if(node->next_sibling() != 0)
								node = node->next_sibling();
						}

						node = node->parent();

					}

					CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.lightgroups_.push_back(light_group);
					if(node->next_sibling() != 0)
						node = node->next_sibling();
				}
			}
		}
	}
}

void XmlData::GetBlindsInfo()
{
	rapidxml::xml_node<> *node = NULL;
	int group_count;
	int blinds_count;

	Blinds::BlindsData blinds_data;
	Blinds::BlindsGroup blinds_group;

	node = cms_self_node_->first_node("blinds");
	group_count = rapidxml::count_children(node);
	if(group_count > 0)
	{
		node = node->first_node("group");

		//	Run through every group
		CmsData::Instance()->cms_self_.blinds_.blindsgroups_.clear();
		for(int group_it = 0; group_it < group_count; group_it++)
		{
			blinds_group.id = atoi(node->first_attribute("id")->value());
			blinds_group.name = node->first_attribute("name")->value();

			blinds_group.blinds.clear();
			blinds_count = rapidxml::count_children(node);
			if(blinds_count > 0)
			{
				node = node->first_node("blind");

				//	Run through every blind
				for(int blinds_it = 0; blinds_it < blinds_count; blinds_it++)
				{
					blinds_data.id = atoi(node->first_attribute("id")->value());
					blinds_data.name = node->first_attribute("name")->value();

					//	Check if it is a group
					if(strcmp(node->first_node("pgn")->first_attribute("direction")->value(), "0") == 0)
					{
						blinds_data.is_group = true;
					}
					else
					{
						blinds_data.is_group = false;
						blinds_data.open_message_instance = atoi(node->first_node("pgn")->first_attribute("instance")->value());
						blinds_data.open_frame_position = atoi(node->first_node("pgn")->first_attribute("bitposition")->value());
						blinds_data.close_message_instance = atoi(node->first_node("pgn")->next_sibling()->first_attribute("instance")->value());
						blinds_data.close_frame_position = atoi(node->first_node("pgn")->next_sibling()->first_attribute("bitposition")->value());
					}
					blinds_group.blinds.push_back(blinds_data);

					if(node->next_sibling() != 0)
						node = node->next_sibling();
				}
				node = node->parent();
			}

			CmsData::Instance()->cms_self_.blinds_.blindsgroups_.push_back(blinds_group);
			if(node->next_sibling() != 0)
				node = node->next_sibling();
		}
	}

	//	If I'm master, do the slaves
	if(CmsData::Instance()->cms_self_.is_master)
	{
		for(unsigned int cms_it = 0; cms_it < cms_slave_nodes_.size(); cms_it++)
		{
			node = cms_slave_nodes_.at(cms_it)->first_node("blinds");
			group_count = rapidxml::count_children(node);
			if(group_count > 0)
			{
				node = node->first_node("group");

				//	Run through every group
				CmsData::Instance()->cms_slaves_.at(cms_it).blinds_.blindsgroups_.clear();
				for(int group_it = 0; group_it < group_count; group_it++)
				{
					blinds_group.id = atoi(node->first_attribute("id")->value());
					blinds_group.name = node->first_attribute("name")->value();

					blinds_group.blinds.clear();
					blinds_count = rapidxml::count_children(node);
					if(blinds_count > 0)
					{
						node = node->first_node("blind");

						//	Run through every blind
						for(int blinds_it = 0; blinds_it < blinds_count; blinds_it++)
						{
							blinds_data.id = atoi(node->first_attribute("id")->value());
							blinds_data.name = node->first_attribute("name")->value();

							//	Check if it is a group
							if(atoi(node->first_node("pgn")->first_attribute("direction")->value()) == 0)
							{
								blinds_data.is_group = true;
							}
							else
							{
								blinds_data.is_group = false;
								blinds_data.open_message_instance = atoi(node->first_node("pgn")->first_attribute("instance")->value());
								blinds_data.open_frame_position = atoi(node->first_node("pgn")->first_attribute("bitposition")->value());
								blinds_data.close_message_instance = atoi(node->first_node("pgn")->next_sibling()->first_attribute("instance")->value());
								blinds_data.close_frame_position = atoi(node->first_node("pgn")->next_sibling()->first_attribute("bitposition")->value());
							}
							blinds_group.blinds.push_back(blinds_data);

							if(node->next_sibling() != 0)
								node = node->next_sibling();
						}
						node = node->parent();
					}

					CmsData::Instance()->cms_slaves_.at(cms_it).blinds_.blindsgroups_.push_back(blinds_group);
					if(node->next_sibling() != 0)
						node = node->next_sibling();
				}
			}
		}
	}

}

void XmlData::GetClimateInfo()
{
	rapidxml::xml_node<> *node = NULL;
	int group_count;
	int switch_count;

	Climate::PowerSwitch power_switch;
	Climate::Heating heating_group;

	//	Do AirCon
	node = cms_self_node_->first_node("climate")->first_node("aircon")->first_node("group");
	CmsData::Instance()->cms_self_.climate_.aircon_.name = node->first_attribute("name")->value();
	CmsData::Instance()->cms_self_.climate_.aircon_.temperature =
	atoi(node->first_node("levels")->first_attribute("value")->value());
	CmsData::Instance()->cms_self_.climate_.aircon_.temperature_defaultvalue =
	atoi(node->first_node("defaultlevels")->first_attribute("value")->value());
	CmsData::Instance()->cms_self_.climate_.aircon_.mode = Climate::OFF;
	CmsData::Instance()->cms_self_.climate_.aircon_.lastactive_mode = Climate::AUTO;
	CmsData::Instance()->cms_self_.climate_.aircon_.fan_speed = 5;

	node = node->first_node("switches");
	switch_count = rapidxml::count_children(node);
	if(switch_count > 0)
	{
		node = node->first_node("switch");
		for(int switch_it = 0; switch_it < switch_count; switch_it++)
		{
			CmsData::Instance()->cms_self_.climate_.aircon_.power_switch.name = node->first_attribute("name")->value();
			CmsData::Instance()->cms_self_.climate_.aircon_.power_switch.id = atoi(node->first_attribute("id")->value());
			CmsData::Instance()->cms_self_.climate_.aircon_.power_switch.group = 0;
			CmsData::Instance()->cms_self_.climate_.aircon_.power_switch.message_instance = atoi(node->first_node("pgn")->first_attribute("instance")->value());
			CmsData::Instance()->cms_self_.climate_.aircon_.power_switch.frame_position = atoi(node->first_node("pgn")->first_attribute("bitposition")->value());
			CmsData::Instance()->cms_self_.climate_.aircon_.power_switch.switch_value = false;

			if(node->next_sibling() != 0)
				node = node->next_sibling();
		}
	}

	//	Do Heating
	node = cms_self_node_->first_node("climate")->first_node("heating");
	if(strcmp(node->last_node()->name(), "master") == 0)
	{
		group_count = rapidxml::count_children(node) - 1;
	}
	else
	{
		CmsData::Instance()->cms_self_.climate_.has_master_switch_ = false;
		group_count = rapidxml::count_children(node);
	}


	if(group_count > 0)
	{
		CmsData::Instance()->cms_self_.climate_.heating_.clear();
		node = node->first_node("group");
		for(int group_it = 0; group_it < group_count; group_it++)
		{
			heating_group.id = atoi(node->first_attribute("id")->value());
			heating_group.name = node->first_attribute("name")->value();
			heating_group.temperature = atoi(node->first_node("levels")->first_attribute("value")->value());
			heating_group.temperature_defaultvalue = atoi(node->first_node("defaultlevels")->first_attribute("value")->value());
			heating_group.message_instance = atoi(node->first_node("pgn")->first_attribute("instance")->value());
			heating_group.frame_position = atoi(node->first_node("pgn")->first_attribute("byteposition")->value());

			node = node->first_node("switches");
			switch_count = rapidxml::count_children(node);
			if(switch_count > 0)
			{
				heating_group.power_switches.clear();
				node = node->first_node("switch");
				for(int switch_it = 0; switch_it < switch_count; switch_it++)
				{
					power_switch.name = node->first_attribute("name")->value();
					power_switch.id = atoi(node->first_attribute("id")->value());
					power_switch.group = 0;
					power_switch.message_instance = atoi(node->first_node("pgn")->first_attribute("instance")->value());
					power_switch.frame_position = atoi(node->first_node("pgn")->first_attribute("bitposition")->value());
					power_switch.switch_value = false;

					heating_group.power_switches.push_back(power_switch);
					if(node->next_sibling() != 0)
						node = node->next_sibling();
				}
				node = node->parent();
			}
			CmsData::Instance()->cms_self_.climate_.heating_.push_back(heating_group);
			if(node->parent()->next_sibling() != 0)
				node = node->parent()->next_sibling();
		}
	}

	//	If I am the master, do the slaves
	if(CmsData::Instance()->cms_self_.is_master)
	{
		for(unsigned int cms_it = 0; cms_it < cms_slave_nodes_.size(); cms_it++)
		{
			//	Do AirCon
			node = cms_slave_nodes_.at(cms_it)->first_node("climate")->first_node("aircon")->first_node("group");
			CmsData::Instance()->cms_slaves_.at(cms_it).climate_.aircon_.name = node->first_attribute("name")->value();
			CmsData::Instance()->cms_slaves_.at(cms_it).climate_.aircon_.temperature =
			atoi(node->first_node("levels")->first_attribute("value")->value());
			CmsData::Instance()->cms_slaves_.at(cms_it).climate_.aircon_.temperature_defaultvalue =
			atoi(node->first_node("defaultlevels")->first_attribute("value")->value());
			CmsData::Instance()->cms_slaves_.at(cms_it).climate_.aircon_.mode = Climate::AUTO;
			CmsData::Instance()->cms_slaves_.at(cms_it).climate_.aircon_.fan_speed = 5;

			node = node->first_node("switches");
			switch_count = rapidxml::count_children(node);
			if(switch_count > 0)
			{
				node = node->first_node("switch");
				for(int switch_it = 0; switch_it < switch_count; switch_it++)
				{
					CmsData::Instance()->cms_slaves_.at(cms_it).climate_.aircon_.power_switch.name = node->first_attribute("name")->value();
					CmsData::Instance()->cms_slaves_.at(cms_it).climate_.aircon_.power_switch.id = atoi(node->first_attribute("id")->value());
					CmsData::Instance()->cms_slaves_.at(cms_it).climate_.aircon_.power_switch.group = 0;
					CmsData::Instance()->cms_slaves_.at(cms_it).climate_.aircon_.power_switch.message_instance = atoi(node->first_node("pgn")->first_attribute("instance")->value());
					CmsData::Instance()->cms_slaves_.at(cms_it).climate_.aircon_.power_switch.frame_position = atoi(node->first_node("pgn")->first_attribute("bitposition")->value());
					CmsData::Instance()->cms_slaves_.at(cms_it).climate_.aircon_.power_switch.switch_value = false;

					if(node->next_sibling() != 0)
						node = node->next_sibling();
				}
			}

			//	Do Heating
			node = cms_slave_nodes_.at(cms_it)->first_node("climate")->first_node("heating");
			group_count = rapidxml::count_children(node);
			if(group_count > 0)
			{
				CmsData::Instance()->cms_slaves_.at(cms_it).climate_.heating_.clear();
				node = node->first_node("group");
				for(int group_it = 0; group_it < group_count; group_it++)
				{
					heating_group.id = atoi(node->first_attribute("id")->value());
					heating_group.name = node->first_attribute("name")->value();
					heating_group.temperature = atoi(node->first_node("levels")->first_attribute("value")->value());
					heating_group.temperature_defaultvalue = atoi(node->first_node("defaultlevels")->first_attribute("value")->value());
					heating_group.message_instance = atoi(node->first_node("pgn")->first_attribute("instance")->value());
					heating_group.frame_position = atoi(node->first_node("pgn")->first_attribute("byteposition")->value());

					node = node->first_node("switches");
					switch_count = rapidxml::count_children(node);
					if(switch_count > 0)
					{
						heating_group.power_switches.clear();
						node = node->first_node("switch");
						for(int switch_it = 0; switch_it < switch_count; switch_it++)
						{
							power_switch.name = node->first_attribute("name")->value();
							power_switch.id = atoi(node->first_attribute("id")->value());
							power_switch.group = 0;
							power_switch.message_instance = atoi(node->first_node("pgn")->first_attribute("instance")->value());
							power_switch.frame_position = atoi(node->first_node("pgn")->first_attribute("bitposition")->value());
							power_switch.switch_value = false;

							heating_group.power_switches.push_back(power_switch);
							if(node->next_sibling() != 0)
								node = node->next_sibling();
						}
						node = node->parent();
					}
					CmsData::Instance()->cms_slaves_.at(cms_it).climate_.heating_.push_back(heating_group);
					if(node->parent()->next_sibling() != 0)
						node = node->parent()->next_sibling();
				}
			}
		}
	}

}

void XmlData::GetFansInfo()
{
	rapidxml::xml_node<> *node = NULL;
	int group_count;
	int fans_count;

	Fans::FanData fan_data;
	Fans::FansGroup fan_group;

	node = cms_self_node_->first_node("ventilation");

	group_count = rapidxml::count_children(node);

	if(group_count > 0)
	{
		node = node->first_node("group");
		CmsData::Instance()->cms_self_.fans_.fansgroups_.clear();
		for(int group_it = 0; group_it < group_count; group_it++)
		{
			//	Get group info
			fan_group.id = atoi(node->first_attribute("id")->value());
			fan_group.name = node->first_attribute("name")->value();

			fan_group.fans.clear();
			fans_count = rapidxml::count_children(node);
			if(fans_count > 0)
			{
				node = node->first_node("fan");

				for(int fan_it = 0; fan_it < fans_count; fan_it++)
				{
					fan_data.id = atoi(node->first_attribute("id")->value());
					fan_data.group = fan_group.id;
					fan_data.name = node->first_attribute("name")->value();
					fan_data.message_instance = atoi(node->first_node("pgn")->first_attribute("instance")->value());
					fan_data.frame_position = atoi(node->first_node("pgn")->first_attribute("byteposition")->value());
					fan_data.level = atoi(node->first_node("levels")->first_attribute("value")->value());
					fan_data.default_level = atoi(node->first_node("defaultlevels")->first_attribute("value")->value());

					if(strcmp(node->first_attribute("type")->value(), "background") == 0)
						fan_data.type = Fans::BACKGROUND;
					else if(strcmp(node->first_attribute("type")->value(), "dayboost") == 0)
						fan_data.type = Fans::DAYBOOST;
					else if(strcmp(node->first_attribute("type")->value(), "nightboost") == 0)
						fan_data.type = Fans::NIGHTBOOST;

					fan_group.fans.push_back(fan_data);

					if(node->next_sibling() != 0)
						node = node->next_sibling();
				}

				node = node->parent();
			}

			CmsData::Instance()->cms_self_.fans_.fansgroups_.push_back(fan_group);
			if(node->next_sibling() != 0)
				node = node->next_sibling();
		}
	}

	//	If I'm master, do the slaves
	if(CmsData::Instance()->cms_self_.is_master)
	{
		for(unsigned int cms_it = 0; cms_it < cms_slave_nodes_.size(); cms_it++)
		{
			node = cms_slave_nodes_.at(cms_it)->first_node("ventilation");

			group_count = rapidxml::count_children(node);

			if(group_count > 0)
			{
				node = node->first_node("group");
				CmsData::Instance()->cms_slaves_.at(cms_it).fans_.fansgroups_.clear();
				for(int group_it = 0; group_it < group_count; group_it++)
				{
					//	Get group info
					fan_group.id = atoi(node->first_attribute("id")->value());
					fan_group.name = node->first_attribute("name")->value();

					fan_group.fans.clear();
					fans_count = rapidxml::count_children(node);
					if(fans_count > 0)
					{
						node = node->first_node("fan");

						for(int fan_it = 0; fan_it < fans_count; fan_it++)
						{
							fan_data.id = atoi(node->first_attribute("id")->value());
							fan_data.group = fan_group.id;
							fan_data.name = node->first_attribute("name")->value();
							fan_data.message_instance = atoi(node->first_node("pgn")->first_attribute("instance")->value());
							fan_data.frame_position = atoi(node->first_node("pgn")->first_attribute("byteposition")->value());
							fan_data.level = atoi(node->first_node("levels")->first_attribute("value")->value());
							fan_data.default_level = atoi(node->first_node("defaultlevels")->first_attribute("value")->value());

							if(strcmp(node->first_attribute("type")->value(), "background") == 0)
								fan_data.type = Fans::BACKGROUND;
							else if(strcmp(node->first_attribute("type")->value(), "daybost") == 0)
								fan_data.type = Fans::DAYBOOST;
							else if(strcmp(node->first_attribute("type")->value(), "nightboost") == 0)
								fan_data.type = Fans::NIGHTBOOST;

							fan_group.fans.push_back(fan_data);

							if(node->next_sibling() != 0)
								node = node->next_sibling();
						}

						node = node->parent();
					}

					CmsData::Instance()->cms_slaves_.at(cms_it).fans_.fansgroups_.push_back(fan_group);
					if(node->next_sibling() != 0)
						node = node->next_sibling();
				}
			}
		}
	}
}

void XmlData::GetSettingsInfo()
{
	rapidxml::xml_node<> *node = NULL;
	int group_count;
	int reset_count;

	Settings::ResetData reset_data;
	Settings::ResetGroup reset_group;

	node = cms_self_node_->first_node("settings");

	//	Do screen settings
	CmsData::Instance()->cms_self_.settings_.screensettings_.screen_brightness_day =
	atoi(node->first_node("screenbrightness")->first_node("levels")->first_attribute("day")->value());
	CmsData::Instance()->cms_self_.settings_.screensettings_.screen_brightness_eve =
	atoi(node->first_node("screenbrightness")->first_node("levels")->first_attribute("eve")->value());
	CmsData::Instance()->cms_self_.settings_.screensettings_.screen_brightness_night =
	atoi(node->first_node("screenbrightness")->first_node("levels")->first_attribute("night")->value());
	CmsData::Instance()->cms_self_.settings_.screensettings_.screen_brightness_theatre =
	atoi(node->first_node("screenbrightness")->first_node("levels")->first_attribute("theatre")->value());

	CmsData::Instance()->cms_self_.settings_.screensettings_.screen_brightness_day_defaultvalue =
	atoi(node->first_node("screenbrightness")->first_node("defaultlevels")->first_attribute("day")->value());
	CmsData::Instance()->cms_self_.settings_.screensettings_.screen_brightness_eve_defaultvalue =
	atoi(node->first_node("screenbrightness")->first_node("defaultlevels")->first_attribute("eve")->value());
	CmsData::Instance()->cms_self_.settings_.screensettings_.screen_brightness_night_defaultvalue =
	atoi(node->first_node("screenbrightness")->first_node("defaultlevels")->first_attribute("night")->value());
	CmsData::Instance()->cms_self_.settings_.screensettings_.screen_brightness_theatre_defaultvalue =
	atoi(node->first_node("screenbrightness")->first_node("defaultlevels")->first_attribute("theatre")->value());

	CmsData::Instance()->cms_self_.settings_.screensettings_.screen_timeout =
	atoi(node->first_node("screentimeout")->first_node("levels")->first_attribute("value")->value());
	CmsData::Instance()->cms_self_.settings_.screensettings_.screen_timeout_defaultvalue =
	atoi(node->first_node("screentimeout")->first_node("defaultlevels")->first_attribute("value")->value());


	//	Do time settings
	CmsData::Instance()->cms_self_.settings_.timesettings_.dawn_start_time =
	atoi(node->first_node("time")->first_node("levels")->first_attribute("dawnstart")->value());
	CmsData::Instance()->cms_self_.settings_.timesettings_.dawn_end_time =
	atoi(node->first_node("time")->first_node("levels")->first_attribute("dawnend")->value());
	CmsData::Instance()->cms_self_.settings_.timesettings_.dusk_start_time =
	atoi(node->first_node("time")->first_node("levels")->first_attribute("duskstart")->value());
	CmsData::Instance()->cms_self_.settings_.timesettings_.dusk_end_time =
	atoi(node->first_node("time")->first_node("levels")->first_attribute("duskend")->value());

	CmsData::Instance()->cms_self_.settings_.timesettings_.dawn_start_time_defaultvalue =
	atoi(node->first_node("time")->first_node("defaultlevels")->first_attribute("dawnstart")->value());
	CmsData::Instance()->cms_self_.settings_.timesettings_.dawn_end_time_defaultvalue =
	atoi(node->first_node("time")->first_node("defaultlevels")->first_attribute("dawnend")->value());
	CmsData::Instance()->cms_self_.settings_.timesettings_.dusk_start_time_defaultvalue =
	atoi(node->first_node("time")->first_node("defaultlevels")->first_attribute("duskstart")->value());
	CmsData::Instance()->cms_self_.settings_.timesettings_.dusk_end_time_defaultvalue =
	atoi(node->first_node("time")->first_node("defaultlevels")->first_attribute("duskend")->value());

	CmsData::Instance()->cms_self_.settings_.SetSunsetTime(240);
	CmsData::Instance()->cms_self_.settings_.SetSunriseTime(240);

	if(node->first_node("masterheating") != 0)
		CmsData::Instance()->cms_self_.settings_.has_master_heating_ = true;
	else
		CmsData::Instance()->cms_self_.settings_.has_master_heating_ = false;

	//	Do Resets
	node = node->first_node("resets");

	group_count = rapidxml::count_children(node);
	if(group_count > 0)
	{
		node = node->first_node("group");
		CmsData::Instance()->cms_self_.settings_.reset_groups_.clear();
		for(int group_it = 0; group_it < group_count; group_it++)
		{
			reset_group.id = atoi(node->first_attribute("id")->value());
			reset_group.name = node->first_attribute("name")->value();

			reset_group.resets.clear();
			reset_count = rapidxml::count_children(node);
			if(reset_count > 0)
			{
				node = node->first_node("reset");

				for(int reset_it = 0; reset_it < reset_count; reset_it++)
				{
					reset_data.id = atoi(node->first_attribute("id")->value());
					reset_data.name = node->first_attribute("name")->value();
					reset_data.group = reset_group.id;

					if(strcmp(node->first_node("pgn")->first_attribute("cantype")->value(), "bit") == 0)
					{
						reset_data.reset_type = Settings::CAN;
						reset_data.message_instance = atoi(node->first_node("pgn")->first_attribute("instance")->value());
						reset_data.frame_position = atoi(node->first_node("pgn")->first_attribute("bitposition")->value());
					}
					else if(strcmp(node->first_node("pgn")->first_attribute("cantype")->value(), "guests") == 0)
						reset_data.reset_type = Settings::GUESTS;
					else if(strcmp(node->first_node("pgn")->first_attribute("cantype")->value(), "all") == 0)
						reset_data.reset_type = Settings::ALL;

					reset_group.resets.push_back(reset_data);

					if(node->next_sibling() != 0)
						node = node->next_sibling();
				}
				node = node->parent();
			}

			CmsData::Instance()->cms_self_.settings_.reset_groups_.push_back(reset_group);
			if(node->next_sibling() != 0)
				node = node->next_sibling();
		}

	}

}

int XmlData::SaveAllParameters()
{
	rapidxml::xml_node<> *node = NULL;
	rapidxml::xml_node<> *node_iterator = NULL;
	rapidxml::xml_attribute<> *attribute = NULL;

	int cms_count;
	int group_count;
	int param_count;


	//	Do all Lights
	node = cms_self_node_->first_node("lights");

	if(strcmp(node->last_node()->name(), "master") == 0)
		group_count = rapidxml::count_children(node) - 1;
	else
		group_count = rapidxml::count_children(node);

	node = node->first_node("group");
	for(int group_it = 0; group_it < group_count; group_it++)
	{
		if(CmsData::Instance()->cms_self_.lighting_.lightgroups_.at(group_it).id ==
			(unsigned int)atoi(node->first_attribute("id")->value()))
		{
			param_count = rapidxml::count_children(node);
			node = node->first_node("light");
			for(int param_it = 0; param_it < param_count; param_it++)
			{
				if(CmsData::Instance()->cms_self_.lighting_.lightgroups_.at(group_it)
					.lights.at(param_it).id == (unsigned int)atoi(node->first_attribute("id")->value()))
				{
					node->first_node("levels")->first_attribute("day")->value
						(to_string(CmsData::Instance()->cms_self_.lighting_.
						lightgroups_.at(group_it).lights.at(param_it).day_value).c_str(), strlen(to_string(CmsData::Instance()->cms_self_.lighting_.
						lightgroups_.at(group_it).lights.at(param_it).day_value).c_str()));

					node->first_node("levels")->first_attribute("eve")->value
						(to_string(CmsData::Instance()->cms_self_.lighting_.
						lightgroups_.at(group_it).lights.at(param_it).eve_value).c_str(), strlen(to_string(CmsData::Instance()->cms_self_.lighting_.
						lightgroups_.at(group_it).lights.at(param_it).eve_value).c_str()));

					node->first_node("levels")->first_attribute("night")->value
						(to_string(CmsData::Instance()->cms_self_.lighting_.
						lightgroups_.at(group_it).lights.at(param_it).night_value).c_str(), strlen(to_string(CmsData::Instance()->cms_self_.lighting_.
						lightgroups_.at(group_it).lights.at(param_it).night_value).c_str()));

					node->first_node("levels")->first_attribute("theatre")->value
						(to_string(CmsData::Instance()->cms_self_.lighting_.
						lightgroups_.at(group_it).lights.at(param_it).theatre_value).c_str(), strlen(to_string(CmsData::Instance()->cms_self_.lighting_.
						lightgroups_.at(group_it).lights.at(param_it).theatre_value).c_str()));

					node->first_node("levels")->first_attribute("shower")->value
						(to_string(CmsData::Instance()->cms_self_.lighting_.
						lightgroups_.at(group_it).lights.at(param_it).shower_value).c_str(), strlen(to_string(CmsData::Instance()->cms_self_.lighting_.
						lightgroups_.at(group_it).lights.at(param_it).shower_value).c_str()));
				}
				//	Do not increment if it's the last one
				if(node->next_sibling() != 0)
					node = node->next_sibling();
			}
			node = node->parent();
		}
		//	Do not increment if it's the last one
		if(node->next_sibling() != 0)
			node = node->next_sibling();
	}


	//	Do all fans
	node = cms_self_node_->first_node("ventilation");

	group_count = rapidxml::count_children(node);
	if(group_count > 0)
	{
		node = node->first_node("group");
		for(int group_it = 0; group_it < group_count; group_it++)
		{
			if(CmsData::Instance()->cms_self_.fans_.fansgroups_.at(group_it).id ==
				(unsigned int)atoi(node->first_attribute("id")->value()))
			{
				param_count = rapidxml::count_children(node);
				node = node->first_node("fan");
				for(int param_it = 0; param_it < param_count; param_it++)
				{
					if(CmsData::Instance()->cms_self_.fans_.fansgroups_.at(group_it)
						.fans.at(param_it).id == (unsigned int)atoi(node->first_attribute("id")->value()))
					{
						node->first_node("levels")->first_attribute("value")->value
							(to_string(CmsData::Instance()->cms_self_.fans_.fansgroups_.at(group_it)
								.fans.at(param_it).level).c_str(), strlen(to_string(CmsData::Instance()->cms_self_.fans_.fansgroups_.at(group_it)
									.fans.at(param_it).level).c_str()));

					}
					//	Do not increment if it's the last one
					if(node->next_sibling() != 0)
						node = node->next_sibling();
				}
				node = node->parent();
			}
			//	Do not increment if it's the last one
			if(node->next_sibling() != 0)
				node = node->next_sibling();
		}
	}

	//	Do Climate
	node = cms_self_node_->first_node("climate");
	node->first_node("aircon")->first_node("group")->first_node("levels")->first_attribute("value")
	->value(to_string(CmsData::Instance()->cms_self_.climate_.aircon_.temperature).c_str(), strlen(to_string(CmsData::Instance()->cms_self_.climate_.aircon_.temperature).c_str()));

	node = node->first_node("heating");
	group_count = rapidxml::count_children(node);
	if(group_count > 0)
	{
		node = node->first_node("group");
		for(int group_it = 0; group_it < group_count; group_it++)
		{
			if(CmsData::Instance()->cms_self_.climate_.heating_.at(group_it).id ==
				atoi(node->first_attribute("id")->value()))
			{
				node->first_node("levels")->first_attribute("value")->value(
					to_string(CmsData::Instance()->cms_self_.climate_.heating_.at(group_it).temperature).c_str(), strlen(to_string(CmsData::Instance()->cms_self_.climate_.heating_.at(group_it).temperature).c_str()));
			}
			//	Do not increment if it's the last one
			if(node->next_sibling() != 0)
				node = node->next_sibling();
		}
	}


	//	If I am the master, save the slave lights
	if(CmsData::Instance()->cms_self_.is_master)
	{
		for(unsigned int cms_it = 0; cms_it < cms_slave_nodes_.size(); cms_it++)
		{
			node = cms_slave_nodes_.at(cms_it)->first_node("lights");

			if(strcmp(node->last_node()->name(), "master") == 0)
				group_count = rapidxml::count_children(node) - 1;
			else
				group_count = rapidxml::count_children(node);

			node = node->first_node("group");
			for(int group_it = 0; group_it < group_count; group_it++)
			{
				if(CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.lightgroups_.at(group_it).id ==
					(unsigned int)atoi(node->first_attribute("id")->value()))
				{
					param_count = rapidxml::count_children(node);
					node = node->first_node("light");
					for(int param_it = 0; param_it < param_count; param_it++)
					{
						if(CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.lightgroups_.at(group_it)
							.lights.at(param_it).id == (unsigned int)atoi(node->first_attribute("id")->value()))
						{
							node->first_node("levels")->first_attribute("day")->value
								(to_string(CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.
								lightgroups_.at(group_it).lights.at(param_it).day_value).c_str(),
							strlen(to_string(CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.
							lightgroups_.at(group_it).lights.at(param_it).day_value).c_str()));

							node->first_node("levels")->first_attribute("eve")->value
								(to_string(CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.
								lightgroups_.at(group_it).lights.at(param_it).eve_value).c_str(),
							strlen(to_string(CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.
							lightgroups_.at(group_it).lights.at(param_it).eve_value).c_str()));

							node->first_node("levels")->first_attribute("night")->value
								(to_string(CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.
								lightgroups_.at(group_it).lights.at(param_it).night_value).c_str(),
							strlen(to_string(CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.
							lightgroups_.at(group_it).lights.at(param_it).night_value).c_str()));

							node->first_node("levels")->first_attribute("theatre")->value
								(to_string(CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.
								lightgroups_.at(group_it).lights.at(param_it).theatre_value).c_str(),
							strlen(to_string(CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.
							lightgroups_.at(group_it).lights.at(param_it).theatre_value).c_str()));

							node->first_node("levels")->first_attribute("shower")->value
								(to_string(CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.
								lightgroups_.at(group_it).lights.at(param_it).shower_value).c_str(),
							strlen(to_string(CmsData::Instance()->cms_slaves_.at(cms_it).lighting_.
							lightgroups_.at(group_it).lights.at(param_it).shower_value).c_str()));
						}
						//	Do not increment if it's the last one
						if(node->next_sibling() != 0)
							node = node->next_sibling();
					}
					node = node->parent();
				}
				//	Do not increment if it's the last one
				if(node->next_sibling() != 0)
					node = node->next_sibling();
			}
		}
	}

	//	Allocate a new buffer, being sure that any eventual changes in size will fit
	pthread_mutex_lock(&xmlfile_mutex_);
	char *temp_buffer = new char[fsize_];
	rapidxml::print(temp_buffer, xml_doc, 0);
	size_t ss = strlen(temp_buffer);
	FILE *xml_file = fopen("test.xml", "w");
	int b = strlen(temp_buffer);
	fwrite(temp_buffer , sizeof(char), fsize_, xml_file);

	fclose(xml_file);
	delete temp_buffer;
	pthread_mutex_unlock(&xmlfile_mutex_);

	return 1;
}
